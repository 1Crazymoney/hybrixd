image: registry.gitlab.com/hybrix/hybrixd/base-images/build-image:stable

variables:

  KUBERNETES_VERSION: 1.13.7
  HELM_VERSION: 2.14.3

  DOCKER_DRIVER: overlay2

  GIT_STRATEGY: none

stages:
  - build
  - test
  - review
  - staging
  - production
  - release
  - publish
  - cleanup

hybrixd:
  cache: {}
  stage: build
  variables:
    GIT_STRATEGY: none
  services:
  - docker:stable-dind
  script:

    # Because of race conditions with merge squashes leaving broken references we circumvent the default git strategy GIT_STRATEGY: none
    - cd ..
    - "git clone -n https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/hybrix/hybrixd/node.git --depth 10 --single-branch --branch $CI_COMMIT_REF_NAME"
    - cd node
    - if git log | grep $CI_COMMIT_SHA; then
    -   echo "Commit $CI_COMMIT_SHA exists, retrieving it."
    -   "git -c advice.detachedHead=false checkout $CI_COMMIT_SHA"
    - else
    -   echo "Commit $CI_COMMIT_SHA does not exist, retrieving latest in branch $CI_COMMIT_REF_NAME"
    -   "git checkout"
    - fi

    - service docker start
    - sh ./scripts/pipeline/build.sh
    - setup_docker
    - build

  artifacts:
    paths:
    - ./

test:
  stage: test
  script:
    - sh ./scripts/pipeline/test.sh
  coverage: /SUCCESS RATE[^|]*\:[^|]*\s+([\d\.]+)/
  except:
   refs:
     - tags
  only:
    variables:
      - $TEST_ENABLED
  artifacts:
    reports:
      junit: test*.xml

review:
  cache: {}
  stage: review
  script:
    - check_kube_domain
    - download_chart
    - ensure_namespace
    - install_tiller
    - create_secret
    - deploy
    - persist_environment_url
  environment:
    name: review-node
    url: http://review-node.$AUTO_DEVOPS_DOMAIN
    on_stop: stop_review
  artifacts:
    paths: [environment_url.txt]
  only:
    refs:
      - branches
    kubernetes: active
  except:
    refs:
      - tags
    variables:
      - $REVIEW_DISABLED

stop_review:
  stage: cleanup
  script:
    - delete
  environment:
    name: review-node
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - branches
    kubernetes: active
  except:
    refs:
      - tags
    variables:
      - $REVIEW_DISABLED

# Keys that start with a dot (.) will not be processed by GitLab CI.
# Staging and canary jobs are disabled by default, to enable them
# remove the dot (.) before the job name.
# https://docs.gitlab.com/ee/ci/yaml/README.html#hidden-keys

# Staging deploys are disabled by default since
# continuous deployment to production is enabled by default
# If you prefer to automatically deploy to staging and
# only manually promote to production, enable this job by setting
# STAGING_ENABLED.

staging:
  cache: {}
  stage: staging
  script:
    - check_kube_domain
    - download_chart
    - ensure_namespace
    - install_tiller
    - create_secret
    - install_certificate
    - deploy
  environment:
    name: staging
    #url: http://$CI_PROJECT_PATH_SLUG-staging.$AUTO_DEVOPS_DOMAIN
    url: https://node-staging.$AUTO_DEVOPS_DOMAIN
  only:
    refs:
      - tags
      #- master
    kubernetes: active
    variables:
      - $STAGING_ENABLED

publish:
  dependencies:
    - dist
  cache: {}
  stage: publish
  script:
    - publish
  only:
    refs:
      - tags

.production: &production_template
  cache: {}
  stage: production
  script:
    - check_kube_domain
    - download_chart
    - ensure_namespace
    - install_tiller
    - create_secret
    - deploy
    - delete canary
    - delete rollout
    - persist_environment_url
  environment:
    name: production
    url: http://$CI_PROJECT_PATH_SLUG.$AUTO_DEVOPS_DOMAIN
  artifacts:
    paths: [environment_url.txt]

production:
  <<: *production_template
  only:
    refs:
      - tags
    kubernetes: active
  except:
    variables:
      - $STAGING_ENABLED

production_manual:
  <<: *production_template
  environment:
    name: production
    url: http://api.hybrix.io
  when: manual
  allow_failure: false
  only:
    refs:
      - tags
      #- master
    kubernetes: active
    variables:
      - $STAGING_ENABLED

dist:
  dependencies:
    - hybrixd
  image: alpine:latest
  stage: release
  script:
  # install the packages that we need
  - apk update
  - apk add curl
  - apk add git
  - apk add tar
  - apk add xz
  - apk add zip
  - apk add jq

  # set variables
  # version -> branchname without '-release'
  #- version=${CI_COMMIT_REF_NAME/-release/}
  - version=${CI_COMMIT_TAG/-release/}
  - component=node
  - file=hybrixd.${component}.${version}
  - fileLatest=hybrixd.${component}.latest
  - path=${component}/${version}/

  - ls

  #- cp -r ./dist/. /tmp/${component}/
  #- cp -r . /tmp/${component}/
  #- cp .version . /tmp/${component}/

  - cd /tmp
  - git clone --depth=1 https://oauth2:${PRIVATE_TOKEN}@gitlab.com/hybrix/dist
  - mkdir -p ./dist/${component}/${version}/

  # download [interface] artifact
  #- "curl --location --header \"JOB-TOKEN: $CI_JOB_TOKEN\" \"https://gitlab.com/api/v4/projects/hybrix%2Fhybrixd%2Finterface/jobs/artifacts/${CI_COMMIT_REF_NAME}/download?job=interface\" -o ${path}${file}.zip"

  # go to folder
  #- ls ./dist/${path}

  #- cp ${path}${file}.zip ./../${file}.zip
  #- unzip ${file}.zip -d ${component}

  # workaround to get the latest artifact
  - PROJECT_REF_SLUG=hybrix%2Fhybrixd%2Fnode
  - PROJECT_REF_PATH=hybrix/hybrixd/node
  - PROJECT_REF_NAME=hybrixd
  - PROJECT_REF_BRANCH=${CI_COMMIT_TAG}
  - "echo ${CI_COMMIT_TAG}"
  - "RESPONSE=$(curl --header \"Private-Token: $PRIVATE_TOKEN\" --silent \"https://gitlab.com/api/v4/projects/${PROJECT_REF_SLUG}/jobs?scope=success\")"
  - "echo \"${RESPONSE}\" | jq -r 'first(.[] | select(.name == \"hybrixd\" and .ref == \"'${PROJECT_REF_BRANCH}'\")) | .id'"
  - "BUILD_JOB_ID=$(echo \"${RESPONSE}\" | jq -r 'first(.[] | select(.name == \"hybrixd\" and .ref == \"'${PROJECT_REF_BRANCH}'\")) | .id')"
  - "echo \"Downloading the artifact from: https://gitlab.com/${PROJECT_REF_PATH}/-/jobs/${BUILD_JOB_ID}/artifacts/download\""
  #- "curl --location --header \"Private-Token: $PRIVATE_TOKEN\" \"https://gitlab.com/${PROJECT_REF_PATH}/-/jobs/${BUILD_JOB_ID}/artifacts/download\" -o artifacts-${PROJECT_REF_NAME}.zip"
  - "curl --location --header \"Private-Token: $PRIVATE_TOKEN\" \"https://gitlab.com/api/v4/projects/${PROJECT_REF_SLUG}/jobs/${BUILD_JOB_ID}/artifacts\" -o artifacts-${PROJECT_REF_NAME}.zip"
  - unzip -o artifacts-hybrixd.zip -d ./${component}/

  - ls
  - ls ${component}

  # archive to zip
  #- mv artifacts-hybrixd.zip ${file}.zip

  # archive to tar.gz
  #- tar -zcvf ${file}.tar.gz ${component}

  # create a xz-archive as well
  #- gunzip < ${file}.tar.gz | xz > ${file}.tar.xz

  - zip -r ${file}.zip ${component}
  - tar -zcvf ${file}.tar.gz ${component}
  - tar cfJ ${file}.tar.xz ${component}

  - cp ${file}.zip ./dist/${component}/${version}/${file}.zip
  - cp ${file}.tar.gz ./dist/${component}/${version}/${file}.tar.gz
  - cp ${file}.tar.xz ./dist/${component}/${version}/${file}.tar.xz

  - mkdir -p ./dist/${component}/latest
  - cp ${file}.zip ./dist/${component}/latest/${fileLatest}.zip
  - cp ${file}.tar.gz ./dist/${component}/latest/${fileLatest}.tar.gz
  - cp ${file}.tar.xz ./dist/${component}/latest/${fileLatest}.tar.xz

  # for interface we like to distribute the js files directly as well
  #- cp -r ./${component}/*.js ./dist/${path}
  - cd ./dist/

  # configure git-user
  - "git config --global user.name \"${GITLAB_USER_NAME}\""
  - "git config --global user.email \"${GITLAB_USER_EMAIL}\""

  # add, commit and push
  - "git add ."
  - "git commit -m \"release ${version} ${component}\" || true"
  - "git push https://oauth2:${PRIVATE_TOKEN}@gitlab.com/hybrix/dist.git -f"

  except:
    refs:
      - /^Issue.*$/
  only:
    refs:
      - tags
  artifacts:
    paths:
      - ./


# ---------------------------------------------------------------------------

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x
  auto_database_url=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${CI_ENVIRONMENT_SLUG}-postgres:5432/${POSTGRES_DB}
  export DATABASE_URL=${DATABASE_URL-$auto_database_url}
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
  export CI_APPLICATION_TAG=$CI_COMMIT_SHA
  export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}
  export TILLER_NAMESPACE=$KUBE_NAMESPACE
  # Extract "MAJOR.MINOR" from CI_SERVER_VERSION and generate "MAJOR-MINOR-stable" for Security Products
  export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')

  function registry_login() {
    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      echo ""
    fi
  }

  function get_replicas() {
    track="${1:-stable}"
    percentage="${2:-100}"

    env_track=$( echo $track | tr -s  '[:lower:]'  '[:upper:]' )
    env_slug=$( echo ${CI_ENVIRONMENT_SLUG//-/_} | tr -s  '[:lower:]'  '[:upper:]' )

    if [[ "$track" == "stable" ]] || [[ "$track" == "rollout" ]]; then
      # for stable track get number of replicas from `PRODUCTION_REPLICAS`
      eval new_replicas=\$${env_slug}_REPLICAS
      if [[ -z "$new_replicas" ]]; then
        new_replicas=$REPLICAS
      fi
    else
      # for all tracks get number of replicas from `CANARY_PRODUCTION_REPLICAS`
      eval new_replicas=\$${env_track}_${env_slug}_REPLICAS
      if [[ -z "$new_replicas" ]]; then
        eval new_replicas=\${env_track}_REPLICAS
      fi
    fi

    replicas="${new_replicas:-1}"
    replicas="$(($replicas * $percentage / 100))"

    # always return at least one replicas
    if [[ $replicas -gt 0 ]]; then
      echo "$replicas"
    else
      echo 1
    fi
  }

  function deploy() {
    track="${1-stable}"
    percentage="${2:-100}"
    name="$CI_ENVIRONMENT_SLUG"

    replicas="1"
    service_enabled="true"
    postgres_enabled="$POSTGRES_ENABLED"

    # if track is different than stable,
    # re-use all attached resources
    if [[ "$track" != "stable" ]]; then
      name="$name-$track"
      service_enabled="false"
      postgres_enabled="false"
    fi

    replicas=$(get_replicas "$track" "$percentage")

    if [[ "$CI_PROJECT_VISIBILITY" != "public" ]]; then
      secret_name='gitlab-registry'
    else
      secret_name=''
    fi

    helm upgrade --install \
      --wait \
      --set service.enabled="$service_enabled" \
      --set releaseOverride="$CI_ENVIRONMENT_SLUG" \
      --set image.repository="$CI_APPLICATION_REPOSITORY" \
      --set image.tag="$CI_APPLICATION_TAG" \
      --set image.pullPolicy=IfNotPresent \
      --set image.secrets[0].name="$secret_name" \
      --set application.track="$track" \
      --set application.database_url="$DATABASE_URL" \
      --set service.url="$CI_ENVIRONMENT_URL" \
      --set replicaCount="$replicas" \
      --set postgresql.enabled="$postgres_enabled" \
      --set postgresql.nameOverride="postgres" \
      --set postgresql.postgresUser="$POSTGRES_USER" \
      --set postgresql.postgresPassword="$POSTGRES_PASSWORD" \
      --set postgresql.postgresDatabase="$POSTGRES_DB" \
      --namespace="$KUBE_NAMESPACE" \
      --version="$CI_PIPELINE_ID-$CI_JOB_ID" \
      "$name" \
      chart/

    kubectl rollout status -n "$KUBE_NAMESPACE" -w "deployment/$name"
  }

  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }

  function download_chart() {
    if [[ ! -d chart ]]; then
      auto_chart=${AUTO_DEVOPS_CHART:-gitlab/auto-deploy-app}
      auto_chart_name=$(basename $auto_chart)
      auto_chart_name=${auto_chart_name%.tgz}
      auto_chart_name=${auto_chart_name%.tar.gz}
    else
      auto_chart="chart"
      auto_chart_name="chart"
    fi

    helm init --client-only
    helm repo add gitlab https://charts.gitlab.io
    if [[ ! -d "$auto_chart" ]]; then
      helm fetch ${auto_chart} --untar
    fi
    if [ "$auto_chart_name" != "chart" ]; then
      mv ${auto_chart_name} chart
    fi

    helm dependency update chart/
    helm dependency build chart/
  }

  function ensure_namespace() {
    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
  }

  function check_kube_domain() {
    if [ -z ${AUTO_DEVOPS_DOMAIN+x} ]; then
      echo "In order to deploy or use Review Apps, AUTO_DEVOPS_DOMAIN variable must be set"
      echo "You can do it in Auto DevOps project settings or defining a variable at group or project level"
      echo "You can also manually add it in .gitlab-ci.yml"
      false
    else
      true
    fi
  }

  function build() {
    registry_login

    if [[ -f Dockerfile ]]; then
      echo "Building Dockerfile-based application..."
      docker build \
        --build-arg HTTP_PROXY="$HTTP_PROXY" \
        --build-arg http_proxy="$http_proxy" \
        --build-arg HTTPS_PROXY="$HTTPS_PROXY" \
        --build-arg https_proxy="$https_proxy" \
        --build-arg FTP_PROXY="$FTP_PROXY" \
        --build-arg ftp_proxy="$ftp_proxy" \
        --build-arg NO_PROXY="$NO_PROXY" \
        --build-arg no_proxy="$no_proxy" \
        -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .
    else
      echo "Building Heroku-based application using gliderlabs/herokuish docker image..."
      docker run -i \
        -e BUILDPACK_URL \
        -e HTTP_PROXY \
        -e http_proxy \
        -e HTTPS_PROXY \
        -e https_proxy \
        -e FTP_PROXY \
        -e ftp_proxy \
        -e NO_PROXY \
        -e no_proxy \
        --name="$CI_CONTAINER_NAME" -v "$(pwd):/tmp/app:ro" gliderlabs/herokuish /bin/herokuish buildpack build
      docker commit "$CI_CONTAINER_NAME" "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
      docker rm "$CI_CONTAINER_NAME" >/dev/null
      echo ""

      echo "Configuring $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG docker image..."
      docker create --expose 5000 --env PORT=5000 --name="$CI_CONTAINER_NAME" "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" /bin/herokuish procfile start web

      #BEGIN CUSTOM SCRIPT

      # replace port for api root (1111) with 5000 in config
      sed -i -e "s#1111#5000#g" hybrixd.conf

      # replace /root with empty string in config
      sed -i -e "s#\"/root\"#\"\"#g" hybrixd.conf


      # replace 127.0.0.1 with $POD_IP on start
      sed -i -e "s:\"./hybrixd\":\"sed -i -e 's/127.0.0.1/'\$POD_IP'/g' hybrixd.conf \&\& ./hybrixd\":g" package.json

      echo "[.] Enable Asset reporting"
      echo "[report]" >> hybrixd.conf
      echo "enable_daily_asset_report = true" >> hybrixd.conf

      docker cp hybrixd.conf "$CI_CONTAINER_NAME":/app/hybrixd.conf
      docker cp package.json "$CI_CONTAINER_NAME":/app/package.json

      #END CUSTOM SCRIPT

      docker commit "$CI_CONTAINER_NAME" "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
      docker rm "$CI_CONTAINER_NAME" >/dev/null
      echo ""
    fi

    echo "Pushing to GitLab Container Registry..."
    docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    echo ""
  }

  function install_tiller() {
    echo "Checking Tiller..."
    helm init --upgrade
    kubectl rollout status -n "$TILLER_NAMESPACE" -w "deployment/tiller-deploy"
    if ! helm version --debug; then
      echo "Failed to init Tiller."
      return 1
    fi
    echo ""
  }

  function create_secret() {
    echo "Create secret..."
    if [[ "$CI_PROJECT_VISIBILITY" == "public" ]]; then
      return
    fi

    kubectl create secret -n "$KUBE_NAMESPACE" \
      docker-registry gitlab-registry \
      --docker-server="$CI_REGISTRY" \
      --docker-username="${CI_DEPLOY_USER:-$CI_REGISTRY_USER}" \
      --docker-password="${CI_DEPLOY_PASSWORD:-$CI_REGISTRY_PASSWORD}" \
      --docker-email="$GITLAB_USER_EMAIL" \
      -o yaml --dry-run | kubectl replace -n "$KUBE_NAMESPACE" --force -f -
  }

  function persist_environment_url() {
      echo $CI_ENVIRONMENT_URL > environment_url.txt
  }

  function install_certificate() {
    echo "View issuer, certs and secrets..."
    kubectl get clusterissuer
    kubectl get certificate
    kubectl get secret
  }

  function delete() {
    track="${1-stable}"
    name="$CI_ENVIRONMENT_SLUG"

    if [[ "$track" != "stable" ]]; then
      name="$name-$track"
    fi

    if [[ -n "$(helm ls -q "^$name$")" ]]; then
      helm delete --purge "$name"
    fi
  }

  #BEGIN CUSTOM SCRIPT

  function publish () {
    # Get correct version from repository tag
    VERSION=${CI_COMMIT_REF_NAME/-release/}
    VERSION_NUMBER="${VERSION//v}"

    sed -i -e "s/.*version.*/\"version\": \"$VERSION_NUMBER\",/" package.json

    # Publish on NPM
    echo "PUBLISH ON NPM"
    npm install npm-cli-login
    node ./node_modules/npm-cli-login/bin/npm-cli-login.js -u "$NPM_USER" -p "$NPM_PASSWORD" -e "$NPM_MAIL" -r "https://registry.npmjs.org"
    npm publish

    # Publish on Github
    echo "PUBLISH ON GITHUB"
    npm config set registry "https://npm.pkg.github.com/"
    node ./node_modules/npm-cli-login/bin/npm-cli-login.js -u "$GITHUB_USER" -p "$GITHUB_PAT" -e "$GITHUB_MAIL" -r "https://npm.pkg.github.com/"
    npm publish

    rm ~/.npmrc
  }

  #END CUSTOM SCRIPT


before_script:
  - *auto_devops
