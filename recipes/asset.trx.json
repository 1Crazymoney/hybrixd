{
  "symbol":"trx",
  "name":"Tron",
  "module":"quartz",
  "mode":"tron",
  "addressRegex":"^\\T[a-zA-Z0-9]{33}$",
  "factor":6,
  "confirmed":20,
  "fee":0,
  "fee-symbol":"trx",
  "contract":null,
  "apiProvidesFullTx": false,
  "host": {
    "default": "https://api.trongrid.io",
    "history": "https://api.tronscan.org/api"
  },
  "import": "transaction-history",
  "cache":10000,
  "features": {"message":false},
  "throttle":10,
  "quartz":{
    "balance" : [
      "data '$contract'",
      "flow 'null' @tronBalance @tokenBalance",
      "@tronBalance",
      "data '$1'",
      "code base58 hex",
      "case lower",
      "drop -8",
      "data {address:'$'}",
      "curl /walletsolidity/getaccount POST 2 1",
      "fail 'Could not connect to host'",
      "tran .balance @done @empty",
      "@tokenBalance",
      "curl ${host.history} /api/account?address=$1 2 1",
      "fail 'Could not connect to host'",
      "poke result",
      "tran .trc20token_balances 1 1",
      "find {contract_address:'$contract'} 1 @trc10tokens",
      "poke result",
      "data '${result[0].balance}'",
      "atom false '${result[0].decimals}'",
      "done",
      "@trc10tokens",
      "peek result",
      "tran .balances 1 1",
      "find {name:'$contract'} 1 @empty",
      "tran '[0].balance' @done @empty",
      "@empty",
      "data 0",
      "@done",
      "atom"
    ],
    "push" : [
      "data '$1'",
      "code hex utf8",
      "poke txData",
      "curl /wallet/broadcasttransaction POST 2 1",
      "fail 'Could not connect to host'",
      "tran .result @end @fail",
      "@end",
      "flow 'true' 1 @fail",
      "peek txData",
      "jpar",
      "tran .txID 1 @failDetails",
      "done",
      "@fail",
      "fail 'Could not push transaction!'",
      "@failDetails",
      "fail 'Could not retrieve transaction ID!'"
    ],
    "transactionData" : [
      "curl ${host.history} /transaction-info?hash=$1 2 1",
      "fail 'Could not connect to host'",
      "done"
    ],
    "reformatTx": [
      "with txFee [data,$] [tran,'.costs.net_fee',2,1] [data,0] [atom] [done]",
      "with txAmount [data,$] [tran,'.contractData.amount',2,1] [data,0] [atom] [done]",
      "with txSymbol [data,$] [tran,'.contractData.asset_name',2,1] [data,'$symbol'] [done]",
      "tran {id:'.hash',height:'.block',timestamp:'.timestamp',amount:'$txAmount',symbol:'$txSymbol',fee:'$txFee','fee-symbol':'${fee-symbol}',source:'.ownerAddress',target:'.toAddress',confirmed:'.confirmed'} @okayData @failData",
      "@failData",
      "done",
      "fail 'Cannot parse transaction data!'",
      "@okayData"
    ],
    "getTransaction" : [
      "call 'transactionData/$1'",
      "# TODO: fee can be TRX and/or 'bandwidth' or 'energy', depending on contract or normal tx!",
      "call reformatTx"
    ],
    "attachment" : [
      "call 'transactionData/$1'",
      "tran '.contractData.data' 2 1",
      "data null",
      "done"
    ],
    "getHistory" : [
      "curl ${host.history} '/transfer?sort=-timestamp&count=true&limit=$count&start=$offset&address=$1' 2 1",
      "fail 'Could not connect to host'",
      "tran '.data' 1 @fail",
      "tran '[].transactionHash' 1 @fail",
      "# done is needed only in this case, since API already correctly defines offset and limit",
      "done",
      "@fail",
      "fail 'Could not get transaction history!'"
    ],
    "sample" : [
      "# contract transaction example: dfc96136312abc9071f92759e41dc3a3d07905f1a12e8c03a558f09917f1c25c",
      "done {address:'TFKTfUocjxpR3JphaytSXvd9t4aLbYR996',transaction:'a4b578576f685ffe0acaa112b5de8a3ba015f00068e750a3987866ad87f0dc1f'}"
    ]
  }
}
