{
  "symbol":"eth",
  "name":"Ethereum",
  "module":"ethereum",
  "mode":"ethereum.main",
  "fee":0.00025,
  "factor":18,
  "host":["https://mainnet.infura.io/mew","https://api.myetherwallet.com/eth"],
  "contract":"0x0000000000000000000000000000000000000000",
  "cache":15000,
  "timeout":30000,
  "throttle":1,
  "cron":300,
  "histPage":25,
  "quartz":{
    "validate" : [
      "rout '/source/wavalidator/$symbol/$1'",
      "done"
    ],
    "sample":[
      "done {address:'0x896a0b2b259d62fd27aeab05c81bb1897ecf767b',transaction:'0x3960bbb7a7697cd76917243cd760e465c7d5b6013f7b62b41f76de3f8901dad8'}"
    ],
    "_balance":[
      "rand",
      "math '*10000.round'",
      "data {jsonrpc: '2.0', method: 'eth_getBalance', params: ['$1','latest'], id: $}",
      "curl asset://$symbol '' POST {'Content-Type': 'application/json'}",
      "done"
    ],
    "fee-factor" : [
      "call 'fee-symbol'",
      "peek '${data}::factor'",
      "done"
    ],

     "contract" : [
      "done '$contract'"
    ],
    "factor" : [
      "done '$factor'"
    ],
    "mode" : [
      "done '$mode'"
    ],
    "fee-symbol" : [
      "data '$symbol'",
      "splt '.'",
      "pick 0",
      "done"
    ],
    "generated" : [
      "data '$generated'",
      "flow 'undefined' 1 2",
      "data 'never'",
      "done"
    ],
    "keygen-base" : [
      "data '$keygen-base'",
      "flow 'undefined' 1 2",
      "data '$symbol'",
      "splt '.'",
      "pick 0",
      "done"
    ],
    "unified-symbols" : [
      "data '$unified-symbols'",
      "flow 'undefined' 1 2",
      "data null",
      "done"
    ],
    "details" : [
      "each {'contract':null,'factor':null,'fee':null,'fee-factor':null,'fee-symbol':null,'mode':null,'keygen-base':null,'unified-symbols':null} 'subdetails'",
      "done {symbol:'$symbol',name:'$name',fee:'${.fee}',factor:'${.factor}',contract:'${.contract}',mode:'${.mode}','unified-symbols':'${.unified-symbols}','fee-symbol':'${.fee-symbol}','fee-factor':'${.fee-factor}','keygen-base':'${.keygen-base}', generated:'never'}"
    ],
    "subdetails" : [
      "call '${.key}'"
    ],
    "history" : [
      "time $timeout",
      "rand",
      "math '*10000.round'",
      "poke randomId",
      "with pageOffset [data,'$offset'] [math,'/$histPage .floor']",
      "with pages [data,'$count'] [math,'/$histPage .floor']",
      "poke page '$pageOffset'",
      "@countLoop",
      "curl http://api.etherscan.io/api ?module=account&action=txlist&address=$1&page=$page&offset=25&sort=desc&startblock=0&endblock=99999999&apikey=YourApiKeyToken GET {'Content-Type': 'application/json'}",
      "tran '.result' 2 1",
      "fail 'Ethereum node returning unexpected result!'",
      "poke 'tempResultArray'",
      "with 'resultArray' ['fuse',$tempResultArray]",
      "loop @countLoop 'page' '<=$pages'",
      "data $resultArray",
      "sort ['.timeStamp',num,desc]",
      "tran '[].hash' 2 1",
      "fail 'Cannot interpret history data!'",
      "with offset [math,'$offset - ($histPage*$pageOffset)']"
    ],
    "transaction" : [
      "time $timeout",
      "rand",
      "math '*10000.round'",
      "poke 'randomId'",
      "data {jsonrpc: '2.0', method: 'eth_getTransactionByHash', params: ['$1'], id: $randomId}",
      "curl asset://$symbol '' POST {'Content-Type': 'application/json'}",
      "tran .result 1 @failData",
      "with .value [code,'hex','dec'] [atom]",
      "with txGas [data,'${.gas}'] [code,'hex','dec']",
      "with txGasPrice [data,'${.gasPrice}'] [code,'hex','dec']",
      "with txFee [math,'$txGas*$txGasPrice'] [atom]",
      "with fee-symbol [call,'fee-symbol']",
      "with timestamp [call,'blockRaw/${.blockNumber}'] [tran,'.result.timestamp',2,1] [data,null] [done]",
      "tran { id:'.hash', timestamp:$timestamp, amount:'.value', symbol:'$symbol', fee:'$txFee', 'fee-symbol':'$fee-symbol', source:'.from', target:'.to', confirmed:true } @okayData @failData",
      "@failData",
      "fail 'Cannot interpret transaction data!'",
      "@okayData"
    ],
    "blockRaw" : [
      "rand",
      "math '*10000.round'",
      "poke 'randomId'",
      "data {jsonrpc: '2.0', method: 'eth_getBlockByNumber', params: ['$1',false], id: $randomId}",
      "curl asset://$symbol '' POST {'Content-Type': 'application/json'}",
      "done"
    ]
  }
}
