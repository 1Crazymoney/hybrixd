{
  "symbol":"eth-api",
  "name":"Ethereum API engine",
  "info":"<p>Ethereum is an open-source, public, blockchain-based distributed computing platform and operating system featuring smart contract (scripting) functionality. It supports a modified version of Nakamoto consensus via transaction-based state transitions.</p> <p>Ether is a token whose blockchain is generated by the Ethereum platform. Ether can be transferred between accounts and used to compensate participant mining nodes for computations performed. Ethereum provides a decentralized virtual machine, the Ethereum Virtual Machine (EVM), which can execute scripts using an international network of public nodes. The virtual machine's instruction set, in contrast to others like Bitcoin Script, is thought to be Turing-complete. \"Gas\", an internal transaction pricing mechanism, is used to mitigate spam and allocate resources on the network.</p><a href=\"https://en.wikipedia.org/wiki/Ethereum\">https://en.wikipedia.org/wiki/Ethereum</a>",
  "cache":15000,
  "throttle":1,
  "timeout":30000,
  "factor":18,
  "fee":"0.0005",
  "feeTokenTx":"0.005",
  "gasprice":"0.00000003",
  "gasPerByte":625,
  "gasPerNativeTx":21000,
  "gasPerAvgERC20Tx":105000,
  "contract":"0x0000000000000000000000000000000000000000",
  "histPage":25,
  "quartz":{
    "init" : [
      "peek contract",
      "flow '0x0000000000000000000000000000000000000000' @finished @token",
      "@token",
      "peek feeTokenTx",
      "form",
      "poke local::fee",
      "@finished",
      "done"
    ],
    "cron" : [
      "time 45000",
      "call updateFee",
      "done"
    ],
    "updateFee" : [
      "time 45000",
      "call getGasPrice",
      "peek contract",
      "flow '0x0000000000000000000000000000000000000000' @native @token",
      "@native",
      "logs 'module ethereum: updating fee for asset $symbol'",
      "math '$gasprice*$gasPerNativeTx'",
      "poke local::fee",
      "done",
      "@token",
      "math '$gasprice*($gasPerNativeTx+$gasPerAvgERC20Tx)'",
      "poke local::fee",
      "done"
    ],
    "getGasPrice" : [
      "rand 10000",
      "data {jsonrpc: '2.0', method: 'eth_gasPrice', params: [], id: $}",
      "curl asset://$symbol '' POST {'Content-Type': 'application/json'}",
      "tran '.result' @gasPriceOk",
      "fail",
      "@gasPriceOk",
      "code hex dec",
      "atom",
      "form",
      "poke local::gasprice",
      "done"
    ],
    "validate" : [
      "rout '/source/wavalidator/$symbol/$1'",
      "done"
    ],
    "sample":[
      "done {address:'0x896a0b2b259d62fd27aeab05c81bb1897ecf767b',transaction:'0x5496d381d8b2c6ae028c69f90a643f1c453bbfd0381df9d0af0e20b09a04dadd'}"
    ],
    "_balance":[
      "rand 10000",
      "data {jsonrpc: '2.0', method: 'eth_getBalance', params: ['$1','latest'], id: $}",
      "curl asset://$symbol '' POST {'Content-Type': 'application/json'}"
    ],
    "fee-factor" : [
      "call 'fee-symbol'",
      "peek '${data}::factor'",
      "done"
    ],
    "contract" : [
      "done '$contract'"
    ],
    "factor" : [
      "done '$factor'"
    ],
    "mode" : [
      "done '$mode'"
    ],
    "fee-symbol" : [
      "data '$symbol'",
      "splt '.'",
      "pick 0",
      "done"
    ],
    "generated" : [
      "data '$generated'",
      "flow 'undefined' 1 2",
      "data 'never'",
      "done"
    ],
    "keygen-base" : [
      "data '$keygen-base'",
      "flow 'undefined' 1 2",
      "data '$symbol'",
      "splt '.'",
      "pick 0",
      "done"
    ],
    "unified-symbols" : [
      "data '$unified-symbols'",
      "flow 'undefined' 1 2",
      "data null",
      "done"
    ],
    "details" : [
      "data {'contract':null,'factor':null,'fee':null,'fee-factor':null,'fee-symbol':null,'mode':null,'keygen-base':null,'unified-symbols':null}",
      "each subdetails",
      "done {symbol:'$symbol',name:'$name',fee:'${.fee}',factor:'${.factor}',contract:'${.contract}',mode:'${.mode}','unified-symbols':'${.unified-symbols}','fee-symbol':'${.fee-symbol}','fee-factor':'${.fee-factor}','keygen-base':'${.keygen-base}', generated:'never'}"
    ],
    "subdetails" : [
      "call '${.key}'"
    ],
    "unspent" : [
      "@retryLoop",
      "rand 1000",
      "data {'jsonrpc': '2.0', 'method': 'eth_getTransactionCount', 'params': ['$1','pending'], 'id': $}",
      "curl asset://$symbol '' POST {'Content-Type': 'application/json'}",
      "tran '.result' 1 2",
      "code 'hex' 'dec'",
      "done {'nonce':'$'}",
      "logs 2 'module ethereum: bad RPC response, retrying request...'",
      "wait 1500",
      "loop @retryLoop 'retries' '<9' '1'",
      "fail 'Error: Ethereum network not responding. Cannot get nonce!'"
    ],
    "history" : [
      "poke count $2 12",
      "poke offset $3 0",
      "data $symbol",
      "flow etc 1 3",
      "poke etc true",
      "jump 9",
      "flow eth 1 4",
      "poke token false",
      "poke etc false",
      "jump 7",
      "take 0 4",
      "flow eth. 1 4",
      "poke token true",
      "poke etc false",
      "jump 2",
      "fail 'Cannot retrieve history for non-Ethereum asset or token.'",
      "time $timeout",
      "with pageOffset [data,'$offset'] [math,'/$histPage'] ['math','floor']",
      "with pages [data,'$count'] [math,'/$histPage'] ['math','floor']",
      "poke page '$pageOffset'",
      "@countLoop",
      "test $etc 1 3",
      "curl https://api.gastracker.io/v1/addr/$1/operations",
      "tran '.items' 7 6",
      "test $token 3 1",
      "curl http://api.etherscan.io/api ?module=account&action=txlist&address=$1&page=$page&offset=25&sort=desc&startblock=0&endblock=99999999&apikey=YourApiKeyToken GET {'Content-Type': 'application/json'}",
      "jump 2",
      "curl http://api.etherscan.io/api ?module=account&action=tokentx&address=$1&contractaddress=$contract&page=$page&offset=25&sort=desc&startblock=0&endblock=999999999&apikey=YourApiKeyToken GET {'Content-Type': 'application/json'}",
      "tran '.result' 2 1",
      "fail 'Ethereum node returning unexpected result!'",
      "poke 'tempResultArray'",
      "with 'resultArray' ['fuse',$tempResultArray]",
      "loop @countLoop 'page' '<=$pages'",
      "data $resultArray",
      "test $etc 1 3",
      "sort ['.timestamp',num,desc]",
      "jump 2",
      "sort ['.timeStamp',num,desc]",
      "tran '[].hash' 2 1",
      "fail 'Cannot interpret history data!'",
      "with offset [math,'$offset - ($histPage*$pageOffset)']",
      "take $offset $count",
      "done"
    ],
    "test" : [
      "done {hash:dynamic}"
    ],
    "push":[
      "rand 1000",
      "data {'jsonrpc': '2.0', 'method': 'eth_sendRawTransaction', 'params': ['$1'], 'id': $}",
      "curl asset://$symbol '' POST {'Content-Type': 'application/json'}",
      "tran '.result' 1 3",
      "regx '^0x' 1 2 ",
      "done",
      "tran '.error' 1 2",
      "fail",
      "logs 2 'module ethereum: bad RPC response, retrying request...'",
      "wait 1500",
      "loop @retryLoop 'retries' '<9' '1'",
      "fail 'Error: Ethereum network not responding. Cannot push transaction!'"
    ],
    "transactionData" : [
      "data '$1_$symbol'",
      "hash",
      "poke storageHash",
      "load 'tx$storageHash' 1 @requestData",
      "unpk 1 @requestData",
      "logs 'getting transaction data from storage $1'",
      "done",
      "@requestData",
      "time $timeout",
      "rand 10000",
      "poke 'randomId'",
      "data $symbol",
      "find '.' 1 @asset",
      "data {jsonrpc: '2.0', method: 'eth_getTransactionReceipt', params: ['$1'], id: $randomId}",
      "curl asset://$symbol '' POST {'Content-Type': 'application/json'}",
      "poke tokenData",
      "data {jsonrpc: '2.0', method: 'eth_getTransactionByHash', params: ['$1'], id: $randomId}",
      "curl asset://$symbol '' POST {'Content-Type': 'application/json'}",
      "with gasPrice [data,'${.result.gasPrice}'] [code,'hex','dec'] [atom,0,$parent::fee-factor] [code,'dec','hex']",
      "peek tokenData",
      "tran .result 1 @fail",
      "with gas [data,'${.gasUsed}']",
      "tran {value:'.logs[0].data', gas:'$gas', blockNumber:'.blockNumber', gasPrice:'$gasPrice', to:'.to', from:'.from', hash:'.transactionHash'} 1 @fail",
      "jump @success",
      "@asset",
      "data {jsonrpc: '2.0', method: 'eth_getTransactionByHash', params: ['$1'], id: $randomId}",
      "curl asset://$symbol '' POST {'Content-Type': 'application/json'}",
      "tran .result @success @fail",
      "@fail",
      "fail 'Cannot read transaction data!'",
      "@success",
      "poke txData",
      "pack",
      "save 'tx$storageHash'",
      "peek txData",
      "done"
    ],
    "transaction" : [
      "data '$1_$symbol_calculated'",
      "hash",
      "poke storageHash",
      "load 'txEl$storageHash' 1 @calculateData",
      "unpk 1 @calculateData",
      "logs 'getting transaction calculation from storage $1'",
      "done",
      "@calculateData",
      "time $timeout",
      "with fee-factor [call,'fee-factor']",
      "call 'transactionData/$1'",
      "poke txData",
      "with .value [code,'hex','dec'] [atom]",
      "with txGas [data,'${.gas}'] [code,'hex','dec']",
      "with txGasPrice [data,'${.gasPrice}'] [code,'hex','dec']",
      "data $symbol",
      "find '.' 1 3",
      "with txFee [math,'$txGas*$txGasPrice'] [atom,0,$fee-factor]",
      "jump 2",
      "with txFee [math,'$txGas*$txGasPrice'] [atom]",
      "peek txData",
      "with txHeight [data,'${.blockNumber}'] [code,'hex','dec']",
      "with fee-symbol [call,'fee-symbol']",
      "with timestamp [call,'blockRaw/${.blockNumber}'] [tran,'.result.timestamp',2,1] [data,0] [code,'hex','dec'] [done]",
      "tran { id:'.hash', timestamp:'$timestamp', height:'$txHeight', amount:'=.amount|.value', symbol:'$symbol', fee:'$txFee', 'fee-symbol':'$fee-symbol', source:'.from', target:'.to', confirmed:true } @okayData @failData",
      "@failData",
      "fail 'Cannot interpret transaction data!'",
      "@okayData",
      "poke txData",
      "pack",
      "save 'txEl$storageHash'",
      "peek txData"
    ],
    "attachment" : [
      "time $timeout",
      "call 'transactionData/$1'",
      "tran '.input' 2 1",
      "done null",
      "done"
    ],
    "message" : [
      "time $timeout",
      "call 'attachment/$1'",
      "code hex utf8",
      "done"
    ],
    "status" : [
      "call history/$1/3/0",
      "join",
      "hash sha256"
    ],
    "blockRaw" : [
      "rand 10000",
      "poke 'randomId'",
      "data {jsonrpc: '2.0', method: 'eth_getBlockByNumber', params: ['$1',false], id: $randomId}",
      "curl asset://$symbol '' POST {'Content-Type': 'application/json'}",
      "done"
    ],
    "balance" : [
      "time 45000",
      "@retryLoop",
      "data $symbol",
      "find '.' @token 1",
      "rand 10000",
      "data {jsonrpc: '2.0', method: 'eth_getBalance', params: ['$1','latest'], id: $}",
      "curl asset://$symbol '' POST {'Content-Type': 'application/json'}",
      "jump @transform",
      "@token",
      "data '$'",
      "func encode",
      "poke encoded",
      "rand 10000",
      "data {jsonrpc: '2.0', method: 'eth_call', params: [{to:'$contract',data:'$encoded'},pending], id: $}",
      "curl asset://$symbol '' POST {'Content-Type': 'application/json'}",
      "@transform",
      "poke transaction",
      "data $symbol",
      "find 'ubq' @ubq @other",
      "@ubq",
      "peek transaction",
      "tran '.result' 1 @failure1",
      "regx '^\\d' 1 @failure1",
      "atom",
      "form",
      "done",
      "@failure1",
      "fail 'Error: Ethereum network not responding. Cannot get balance!'",
      "@other",
      "peek transaction",
      "tran .result 1 @failure",
      "regx '^0x' 1 @failure",
      "code 'hex' 'dec'",
      "atom",
      "form",
      "done",
      "@failure",
      "logs 2 'module ethereum: bad RPC response \"$\", retrying request...'",
      "wait 1500",
      "loop @retryLoop retries '<9' '1'",
      "fail 'Error: Ethereum network not responding. Cannot get balance!'"
    ],
    "fee":[
      "poke extraCost 0",
      "peek contract",
      "flow '0x0000000000000000000000000000000000000000' @native @token",
      "@native",
      "data $1",
      "void @basicFee @inputCalcNative",
      "@inputCalcNative",
      "ship 2 2 2 1",
      "size",
      "poke extraCost",
      "@basicFee",
      "peek local::fee $fee",
      "math '$ + ($gasprice * $extraCost)'",
      "form",
      "done",
      "@token",
      "data $1",
      "void @averageERC20Fee @inputCalcToken",
      "@averageERC20Fee",
      "peek local::fee $fee",
      "form",
      "done",
      "@inputCalcToken",
      "ship 4 4 4 1",
      "rout '/engine/evm-interpreter/get/gas/$'",
      "poke extraCost",
      "jump 3",
      "math '$gasPerByte * $'",
      "poke extraCost",
      "peek local::fee $fee",
      "math '$ + $gasprice*($gasPerNativeTx+$extraCost)'",
      "form",
      "done"
    ]
  }
}
