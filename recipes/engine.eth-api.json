{
  "symbol":"eth-api",
  "name":"Ethereum API engine",
  "info":"<p>Ethereum is an open-source, public, blockchain-based distributed computing platform and operating system featuring smart contract (scripting) functionality. It supports a modified version of Nakamoto consensus via transaction-based state transitions.</p> <p>Ether is a token whose blockchain is generated by the Ethereum platform. Ether can be transferred between accounts and used to compensate participant mining nodes for computations performed. Ethereum provides a decentralized virtual machine, the Ethereum Virtual Machine (EVM), which can execute scripts using an international network of public nodes. The virtual machine's instruction set, in contrast to others like Bitcoin Script, is thought to be Turing-complete. \"Gas\", an internal transaction pricing mechanism, is used to mitigate spam and allocate resources on the network.</p><a href=\"https://en.wikipedia.org/wiki/Ethereum\">https://en.wikipedia.org/wiki/Ethereum</a>",
  "cache":15000,
  "throttle":1,
  "timeout":30000,
  "factor":18,
  "fee":"0.0005",
  "feeContractTx":"0.005",
  "gasPrice":"0.000000015",
  "gasPerByte":625,
  "gasBaseFee":21000,
  "gasContractAvgFee":105000,
  "gasLimitNativeTx":90000,
  "gasLimitContractTx":336000,
  "contract":"0x0000000000000000000000000000000000000000",
  "histPage":25,
  "import": "transaction-history",
  "apiProvidesFullTx": false,
  "quartz":{
    "init" : [
      "peek contract",
      "flow '0x0000000000000000000000000000000000000000' 1 @skipTokens",
      "peek gasPrice",
      "poke local::gasPrice",
      "@skipTokens",
      "done"
    ],
    "cron" : [
      "peek contract",
      "flow '0x0000000000000000000000000000000000000000' 1 @skipTokens",
      "time 45000",
      "call updateFee",
      "@skipTokens",
      "done"
    ],
    "updateFee" : [
      "time 45000",
      "call getGasPrice",
      "logs 'module ethereum: updating fee for asset $symbol'",
      "math '$local::gasPrice*$gasBaseFee'",
      "poke local::fee",
      "math '$local::gasPrice*($gasBaseFee+$gasContractAvgFee)'",
      "poke local::feeContractTx",
      "done"
    ],
    "getGasPrice" : [
      "rand 10000",
      "data {jsonrpc: '2.0', method: 'eth_gasPrice', params: [], id: $}",
      "curl POST {'Content-Type': 'application/json'} 2 1",
      "fail 'Could not connect to host'",
      "tran '.result' @gasPriceOk",
      "fail",
      "@gasPriceOk",
      "code hex dec",
      "atom",
      "form",
      "poke local::gasPrice",
      "done"
    ],
    "sample":[
      "done {address:'0x896a0b2b259d62fd27aeab05c81bb1897ecf767b',transaction:'0x5496d381d8b2c6ae028c69f90a643f1c453bbfd0381df9d0af0e20b09a04dadd'}"
    ],
    "_balance":[
      "rand 10000",
      "data {jsonrpc: '2.0', method: 'eth_getBalance', params: ['$1','latest'], id: $}",
      "curl POST {'Content-Type': 'application/json'} 2 1",
      "fail 'Could not connect to host'",
      "done"
    ],
    "fee-factor" : [
      "call 'fee-symbol'",
      "peek '${data}::factor'",
      "done"
    ],
    "contract" : [
      "done '$contract'"
    ],
    "factor" : [
      "done '$factor'"
    ],
    "mode" : [
      "done '$mode'"
    ],
    "fee-symbol" : [
      "data '$symbol'",
      "splt '.'",
      "pick 0",
      "done"
    ],
    "generated" : [
      "data '$generated'",
      "flow 'undefined' 1 2",
      "data 'never'",
      "done"
    ],
    "keygen-base" : [
      "data '$keygen-base'",
      "flow 'undefined' 1 2",
      "data '$symbol'",
      "splt '.'",
      "pick 0",
      "done"
    ],
    "unified-symbols" : [
      "data '$unified-symbols'",
      "flow 'undefined' 1 2",
      "data null",
      "done"
    ],
    "details" : [
      "data {'contract':null,'factor':null,'fee':null,'fee-factor':null,'fee-symbol':null,'mode':null,'keygen-base':null,'unified-symbols':null}",
      "each subdetails",
      "done {symbol:'$symbol',name:'$name',fee:'${.fee}',factor:'${.factor}',contract:'${.contract}',mode:'${.mode}','unified-symbols':'${.unified-symbols}','fee-symbol':'${.fee-symbol}','fee-factor':'${.fee-factor}','keygen-base':'${.keygen-base}', generated:'never'}"
    ],
    "subdetails" : [
      "call '${.key}'"
    ],
    "unspent" : [
      "@retryLoop",
      "rand 1000",
      "data {'jsonrpc': '2.0', 'method': 'eth_getTransactionCount', 'params': ['$1','pending'], 'id': $}",
      "curl POST {'Content-Type': 'application/json'} 2 1",
      "fail 'Could not connect to host'",
      "tran '.result' 1 @fail",
      "code hex dec",
      "poke nonce",
      "call estimateGas/$4",
      "poke gasDataFee",
      "peek contract",
      "flow '0x0000000000000000000000000000000000000000' @native @token",
      "@native",
      "done {'nonce':'$nonce', gasBaseFee: '$gasBaseFee', gasLimit: '$gasLimitNativeTx', gasPrice: '$gasPrice', gasDataFee: '$gasDataFee'}",
      "@token",
      "done {'nonce':'$nonce', gasBaseFee: '$gasBaseFee', gasLimit: '$gasLimitContractTx', gasPrice: '$gasPrice', gasDataFee: '$gasDataFee'}",
      "@fail",
      "logs 2 'module ethereum: bad RPC response, retrying request...'",
      "wait 1500",
      "loop @retryLoop 'retries' '<9' '1'",
      "fail 'Error: Ethereum network not responding. Cannot get nonce!'"
    ],
    "getHistory" : [
      "poke count $2 12",
      "poke offset $3 0",
      "data $symbol",
      "flow etc 1 3",
      "poke etc true",
      "jump 9",
      "flow eth 1 4",
      "poke token false",
      "poke etc false",
      "jump 7",
      "take 0 4",
      "flow eth. 1 4",
      "poke token true",
      "poke etc false",
      "jump 2",
      "fail 'Cannot retrieve history for non-Ethereum asset or token.'",
      "time $timeout",
      "with pageOffset [data,'$offset'] [math,'/$histPage'] ['math','floor']",
      "with pages [data,'$count'] [math,'/$histPage'] ['math','floor']",
      "poke page '$pageOffset'",
      "poke resultArray []",
      "@countLoop",
      "test $etc 1 4",
      "curl https://api.gastracker.io/v1/addr/$1/operations 2 1",
      "fail 'Could not connect to gastracker'",
      "tran '.items' 7 6",
      "test $token 3 1",
      "curl http://api.etherscan.io/api ?module=account&action=txlist&address=$1&page=$page&offset=25&sort=desc&startblock=0&endblock=99999999&apikey=YourApiKeyToken GET {'Content-Type': 'application/json'} 1 @failHost",
      "jump 2",
      "curl http://api.etherscan.io/api ?module=account&action=tokentx&address=$1&contractaddress=$contract&page=$page&offset=25&sort=desc&startblock=0&endblock=999999999&apikey=YourApiKeyToken GET {'Content-Type': 'application/json'} 1 @failHost",
      "tran '.result' 2 1",
      "fail 'Ethereum node returning unexpected result!'",
      "poke tempResultArray",
      "with resultArray [fuse,$tempResultArray]",
      "loop @countLoop 'page' '<=$pages'",
      "data $resultArray",
      "test $etc 1 3",
      "sort ['.timestamp',num,desc]",
      "jump 2",
      "sort ['.timeStamp',num,desc]",
      "tran '[].hash' 2 1",
      "fail 'Cannot interpret history data!'",
      "with offset [math,'$offset - ($histPage*$pageOffset)']",
      "take $offset $count",
      "done",
      "@failHost",
      "fail 'Could not connect to host'"
    ],
    "test" : [
      "done {hash:dynamic}"
    ],
    "push":[
      "rand 1000",
      "data {'jsonrpc': '2.0', 'method': 'eth_sendRawTransaction', 'params': ['$1'], 'id': $}",
      "curl POST {'Content-Type': 'application/json'} 2 1",
      "fail 'Could not connect to host'",
      "tran '.result' 1 3",
      "regx '^0x' 1 2 ",
      "done",
      "tran '.error' 1 2",
      "fail",
      "logs 2 'module ethereum: bad RPC response, retrying request...'",
      "wait 1500",
      "loop @retryLoop 'retries' '<9' '1'",
      "fail 'Error: Ethereum network not responding. Cannot push transaction!'"
    ],
    "transactionData" : [
      "time $timeout",
      "rand 10000",
      "poke 'randomId'",
      "data $symbol",
      "data {jsonrpc: '2.0', method: 'eth_getTransactionByHash', params: ['$1'], id: $randomId}",
      "curl POST {'Content-Type': 'application/json'} 2 1",
      "fail 'Could not connect to host'",
      "tran .result @success @fail",
      "@fail",
      "tran .error.message @errormsg 1",
      "fail 'Cannot read transaction data!'",
      "@errormsg",
      "fail 'Error on Ethereum network: $'",
      "@success",
      "poke txData",
      "pack",
      "save 'tx$storageHash'",
      "peek txData",
      "done"
    ],
    "reformatTx": [
      "poke txData",
      "with txGas [data,'${.gas}'] [code,'hex','dec']",
      "with txGasPrice [data,'${.gasPrice}'] [code,'hex','dec']",
      "data $symbol",
      "find '.' @sectionA",
      "with txFee [math,'$txGas*$txGasPrice'] [atom]",
      "with txAmount [peek,'txData'] [tran,'=.amount|.value'] [code,'hex','dec'] [atom]",
      "with txTarget [peek,'txData'] [tran,'=.to']",
      "jump @sectionB",
      "@sectionA",
      "with txFee [math,'$txGas*$txGasPrice'] [atom,0,$fee-factor]",
      "call 'attachment/$1'",
      "# TODO: we need more stringent checking for ERC type, than merely testing for empty!",
      "flow '0x' @notTokenTx",
      "with txTarget [data,'$'] [pick,34,74] [push,'0x',0]",
      "with txAmount [data,'$'] [pick,102,138] [code,'hex','dec'] [atom]",
      "@sectionB",
      "peek txData",
      "with txHeight [data,'${.blockNumber}'] [code,'hex','dec']",
      "with fee-symbol [call,'fee-symbol']",
      "with timestamp [call,'blockRaw/${.blockNumber}'] [tran,'.result.timestamp',2,1] [data,0] [code,'hex','dec'] [done]",
      "tran { id:'=.hash', timestamp:'$timestamp', height:'$txHeight', amount:'$txAmount', symbol:'$symbol', fee:'$txFee', 'fee-symbol':'$fee-symbol', source:'.from', target:'$txTarget', confirmed:true } @okayData @failData",
      "@failData",
      "# CAN CRASH hybrix!: tran '.blockHash' }",
      "fail 'Cannot interpret transaction data!'",
      "@notTokenTx",
      "fail 'This is a native, and not token transaction!'",
      "@okayData",
      "done"
    ],
    "getTransaction" : [
      "time $timeout",
      "with fee-factor [call,'fee-factor']",
      "call 'transactionData/$1'",
      "call 'reformatTx/$1'"
    ],
    "attachment" : [
      "time $timeout",
      "call 'transactionData/$1'",
      "tran '.input' 2 1",
      "done null",
      "done"
    ],
    "message" : [
      "time $timeout",
      "call 'attachment/$1'",
      "code hex utf8",
      "done"
    ],
    "status" : [
      "call history/$1/3/0",
      "join",
      "hash sha256"
    ],
    "blockRaw" : [
      "rand 10000",
      "data {jsonrpc: '2.0', method: 'eth_getBlockByNumber', params: ['$1',false], id: $}",
      "curl POST {'Content-Type': 'application/json'} 2 1",
      "fail",
      "done"
    ],
    "balance" : [
      "time 45000",
      "@retryLoop",
      "data $symbol",
      "find '.' @token 1",
      "rand 10000",
      "data {jsonrpc: '2.0', method: 'eth_getBalance', params: ['$1','latest'], id: $}",
      "curl POST {'Content-Type': 'application/json'} 2 1",
      "fail 'Could not connect to host'",
      "jump @transform",
      "@token",
      "func encode/$1",
      "poke encoded",
      "rand 10000",
      "data {jsonrpc: '2.0', method: 'eth_call', params: [{to:'$contract',data:'$encoded'},pending], id: $}",
      "curl POST {'Content-Type': 'application/json'} 2 1",
      "fail 'Could not connect to host'",
      "@transform",
      "tran .result 1 @failure",
      "regx '^0x' 1 @failure",
      "code 'hex' 'dec'",
      "atom",
      "form",
      "done",
      "@failure",
      "logs 2 'module ethereum: bad RPC response \"$\", retrying request...'",
      "wait 1500",
      "loop @retryLoop retries '<9' '1'",
      "fail 'Error: Ethereum network not responding. Cannot get balance!'"
    ],
    "estimateGas":[
      "peek contract",
      "flow '0x0000000000000000000000000000000000000000' @native @token",
      "@native",
      "data $1",
      "void @zeroFee @inputCalcNative",
      "@inputCalcNative",
      "ship 2 2 2 1",
      "size",
      "math 'round( $gasPerByte * $ )'",
      "done",
      "@zeroFee",
      "done 0",
      "@token",
      "data $1",
      "void @averageERC20Fee @inputCalcToken",
      "@averageERC20Fee",
      "done $gasContractAvgFee",
      "@inputCalcToken",
      "ship 3 3 3 1",
      "rout '/engine/evm-interpreter/get/gas/$'",
      "done",
      "math 'round( $gasBaseFee+($gasPerByte * $) )'",
      "done"
    ],
    "fee":[
      "call estimateGas/$1",
      "poke gasEstimation",
      "peek contract",
      "flow '0x0000000000000000000000000000000000000000' @native @token",
      "@native",
      "peek local::fee $fee",
      "jump @done",
      "@token",
      "peek symbol",
      "splt .",
      "pick",
      "rout '/asset/$/fee'",
      "math $/$gasBaseFee",
      "poke mainAssetGasPrice",
      "math '$*($gasBaseFee+$gasContractAvgFee)'",
      "math '$+($mainAssetGasPrice*$gasEstimation)'",
      "form",
      "done",
      "@done",
      "math '$ + ($local::gasPrice * $gasEstimation)'",
      "form",
      "done"
    ]
  }
}
