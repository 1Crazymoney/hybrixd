{
  "symbol":"xem",
  "name":"NEM New Economy Movement",
  "info":"<p>NEM is a peer-to-peer cryptocurrency and blockchain platform launched on March 29, 2015. Written in Java, with a C++ version in the works, NEM has a stated goal of a wide distribution model. <a href=\"https://en.wikipedia.org/wiki/NEM_(cryptocurrency)\"> https://en.wikipedia.org/wiki/NEM_(cryptocurrency)</a></p>",
  "module":"quartz",
  "mode":"nem",
  "addressRegex":"^([a-zA-Z0-9]{6}-?){6}[a-zA-Z0-9]{4}$",
  "factor":6,
  "fee":0.05,
  "fee-mosaic":0.9,
  "fee-symbol":"xem",
  "contract":null,
  "host":["http://88.99.192.82:7890", "http://176.9.68.110:7890", "http://176.9.20.180:7890", "http://199.217.118.114:7890"],
  "legacy-hosts": ["http://bigalice3.nem.ninja:7890", "http://104.251.212.131:7890","http://45.124.65.125:7890","http://185.53.131.101:7890"],
  "recipe-documentation": "Current nodes as found on http://chain.nem.ninja/#/nodes/. 'Huge Alice' nodes seem to offer most optimal functionality. API endpoints can be found here: https://nemproject.github.io/",
  "timeout":32000,
  "cache":1000,
  "throttle":5,
  "genesisBlockTime":1427583985,
  "quartz":{
    "unspent" : [
      "data '$contract'",
      "flow 'null' 1 2",
      "done 'Unspent returns mosaic data only in NEM tokens.'",
      "with 'namespace' [data,'$contract'] [splt,':'] [pick]",
      "curl asset://$symbol /account/mosaic/definition/page?address=$originator&parent=$namespace GET",
      "tran '.data' 1 2",
      "find {'namespaceId':'$namespace'} 2 1",
      "fail 'Contract address invalid or no mosaics found!'",
      "tran '.0' 1 1",
      "done"
    ],
    "balance" : [
      "data '$1'",
      "excl '-'",
      "poke 'address'",
      "time $timeout",
      "data '$contract'",
      "flow 'null' @normalBalance @tokenBalance",
      "@normalBalance",
      "curl asset://$symbol /account/get?address=$address GET",
      "tran '.account.balance' 2 1",
      "fail 'Could not get account balance!'",
      "atom",
      "jump @done",
      "@tokenBalance",
      "with 'namespace' [data,'$contract'] [splt,':'] [pick]",
      "curl asset://$symbol /account/mosaic/owned?address=$address GET",
      "tran '.data' 2 1",
      "fail 'Could not get account token balance!'",
      "find {'namespaceId':'$namespace'} 1 2",
      "tran '[0].quantity' 2 1",
      "data 0",
      "atom",
      "@done"
    ],
    "push" : [
      "data '$1'",
      "jpar",
      "curl asset://$symbol /transaction/announce POST {'content-type':'application/json'}",
      "tran '.transactionHash.data' 2 1",
      "fail '${.error} : ${.message}'",
      "done"
    ],
    "transaction" : [
      "curl asset://$symbol /transaction/get?hash=$1 GET {'content-type':'application/json'}",
      "poke unformattedDataArray",
      "tran {id:'.meta.hash.data',amount:'.transaction.amount',fee:'.transaction.fee',target:'.transaction.recipient',source:'.transaction.signer',timestamp:'.transaction.timeStamp'} 1 @badObject",
      "poke reformatObj",
      "with reformatTimestamp [data,$reformatObj] [tran,'.timestamp'] [math,'+$genesisBlockTime']",
      "with reformatFee [data,$reformatObj] [tran,'.fee'] ['atom']",
      "with reformatAmount [data,$reformatObj] [tran,'.amount'] ['atom']",
      "with reformatId [data,$reformatObj] [tran,'.id']",
      "with reformatTarget [data,$reformatObj] [tran,'.target'] [case,'upper'] [push,'-',[6,12,18,24,30,36]]",
      "with signer [data,$reformatObj] [tran,'.source']",
      "curl asset://$symbol /account/get/forwarded/from-public-key?publicKey=$signer GET {'content-type':'application/json'}",
      "with reformatSource [data,$data] [tran,'.account.address'] [case,'upper'] [push,'-',[6,12,18,24,30,36]]",
      "peek unformattedDataArray",
      "tran {id:'$reformatId', timestamp:'$reformatTimestamp', amount:'$reformatAmount', symbol:'$symbol', fee:'$reformatFee', 'fee-symbol':'$fee-symbol', source:'$reformatSource', target:'$reformatTarget', confirmed:true} 1 @badObject",
      "jump @done",
      "@badObject",
      "fail 'Could not get transaction data!'",
      "@done"
    ],
    "attachment" : [
      "curl asset://$symbol /transaction/get?hash=$1 GET {'content-type':'application/json'}",
      "poke 'unformattedDataArray'",
      "tran {id:'.meta.hash.data',amount:'.transaction.amount',fee:'.transaction.fee',target:'.transaction.recipient',source:'.transaction.signer',data:'.transaction.message'} 1 @badObject",
      "poke 'reformatObj'",
      "with 'reformatData' ['data',$reformatObj] ['tran','.data',1,3] ['jstr'] ['flow','{}',1,2] ['data',null] ['done']",
      "done $reformatData"
    ],
    "message" : [
      "call attachment/$1",
      "tran .payload 2 1",
      "done ''",
      "code hex utf8",
      "done"
    ],
    "history" : [
      "poke count $2 12",
      "poke offset $3 0",
      "data []",
      "poke 'resultArray'",
      "data '$1'",
      "repl '-' ''",
      "poke 'address'",
      "poke 'hash' ''",
      "math '($count+$offset)/25'",
      "math 'ceil'",
      "poke 'pages'",
      "poke 'loopVar' 0",
      "@countLoop",
      "data '$address$hash'",
      "curl asset://$symbol /account/transfers/all?address=$address$hash GET {'content-type':'application/json'}",
      "tran '.data' 1 @badResponse",
      "each 'extract_hash_and_time'",
      "excl null",
      "poke 'tempResultArray'",
      "pick -1",
      "tran '.hash' 1 @badResponse",
      "push '&hash=' 0",
      "poke 'hash'",
      "with 'resultArray' ['fuse',$tempResultArray]",
      "loop @countLoop 'loopVar' '<$pages'",
      "@noNewData",
      "peek 'resultArray'",
      "sort ['.time','num','desc']",
      "tran '[].hash'",
      "jump @allDone",
      "@badResponse",
      "fail 'Could not query history! Bad response from XEM node!'",
      "@allDone",
      "take $offset $count",
      "done"
    ],
    "extract_hash_and_time" : [
      "data ${.value}",
      "tran {hash:'.meta.hash.data', time:'.transaction.timeStamp'} 1 @badObject",
      "done",
      "@badObject",
      "done null"
    ],
    "contract" : [
      "data '$contract'",
      "flow 'null' 1 2",
      "done null",
      "done '$originator:$contract'"
    ],
    "fee" : [
      "data '$contract'",
      "flow 'null' 1 3",
      "data '$fee'",
      "jump 2",
      "data '$fee-mosaic'"
    ],
    "sample" : [
      "done {address:'NCKZD7-JGDLND-IVVPH6-U2PG2Q-KD3PX3-FX4CPZ-MF2A',transaction:'215b900475b13f724acc9fbe249bb9ffd31451c2352ed51b9637143cde4c260a'}"
    ],
    "test":[
      "done {hash:dynamic}"
    ]
  }
}
