{
  "engine":"voting",
  "name":"Voting engine",
  "module":"quartz",
  "cache":100,
  "throttle":10,
  "quartz":{
    "listAddresses" : [
      "poke '::coreMode','elegibility'",
      "call 'coreList'",
      "each data 'readAddress'",
      "excl ''",
      "done"
    ],
    "readAddress" : [
      "data 'address '+data.value",
      "hash 'sha256'",
      "hook @filenotfound",
      "load '$data'",
      "file",
      "jpar",
      "done",
      "@filenotfound",
      "done ''"
    ],
    "addAddress" : [
      "data '$2'",
      "splt ':'",
      "poke 'userdata'",
    "# does request contain two parts? (userhash:useraddr)",
      "have",
      "true '<2' @badinputfmt",
    "# check if userhash is on eligibility list",
      "poke 'userhash' $userdata[0]",
      "poke 'useraddr' $userdata[1]",
      "poke '::coreMode' 'eligibility'",
      "poke '::coreData' '$userhash'",
      "call 'coreList'",
      "excl '$userhash' 1 @notelligible",
    "# reinsert hash at beginning of array",
      "push '$userhash' 0",
    "# check if address is not already added",
      "each data 'readAddress'",
      "find '$useraddr' @alreadyadd 1",
    "# add address under Eligibility key",
      "data 'address $userhash'",
      "hash 'sha256'",
      "poke 'idx'",
      "peek 'useraddr'",
      "save '$idx'",
      "done 'User added to elligible voters.'",
    "# error messages on fail",
      "@notelligible",
      "fail 1 'User not elligible!'",
      "@alreadyadd",
      "fail 1 'User already on list!'",
      "@badinputfmt",
      "fail 1 'Bad input format! Expecting: /userhash:useraddr'"
    ],
    "listEligibility" : [
      "poke '::coreMode','elegibility'",
      "call 'coreList'",
      "done"
    ],
    "addEligibility" : [
      "poke '::coreData','$2'",
      "poke '::coreMode','elegibility'",
      "call 'coreList'",
      "find '$2' @alreadyadd",
      "call 'coreAdd'",
      "done",
      "@alreadyadd",
      "done 'Elligibility already added!'"
    ],
    "coreList" : [
      "data '$::coreMode $1'",
      "hash 'sha256'",
      "hook @notFoundOrEmpty",
      "load '$data'",
      "file",
      "jpar",
      "done",
      "@notFoundOrEmpty",
      "done []"
    ],
    "coreAdd" : [
      "data '$::coreMode $1'",
      "hash 'sha256'",
      "poke 'idx'",
      "data '$::coreData'",
      "splt ','",
      "poke 'inputdata'",
      "hook @emptylist",
      "load '$idx'",
      "file",
      "jpar @savelist",
      "@emptylist",
      "data []",
      "@savelist",
      "push $inputdata",
      "save '$idx'",
      "done 'Added $::coreData to list $::coreMode'+'_$1'"
    ],
    "coreReset" : [
      "data '$1 $2'",
      "hash 'sha256'",
      "poke 'idx'",
      "data []",
      "save '$idx'",
      "done 'Core list reset'"
    ]
  },
  "router" : {
    "_help" : "(experimental!) Voting engine utilizing decentralized consensus and storage."
    "listAddresses" : {
      "_help": "List all eligibility addresses",
      "_ref" : {
        "_list" : "session_id",
        "_this" : "An array is returned listing all eligibility addresses."
      }
    },
    "listAddress" : {'_alias':'listAddresses'}
    "addAddress" : {
      "_help": "Add eligibility adresses to voting session",
      "_ref" : {
        "_list" : "session_id",
          "_ref" : {
              "_list" : "eligibility_address",
              "_this" : "Adds an eligibility address or addresses under the specified voting session ID. [format: hash:address]"
          }
      }
    },
    "listEligibility" : {
      "_help": "List all eligibility codes",
      "_ref" : {
        "_list" : "session_id",
        "_this" : "An array is returned listing all eligibility codes."
      }
    },
    "addEligibility" : {
      "_help": "Add eligibility codes to voting session",
      "_ref" : {
        "_list" : "session_id",
          "_ref" : {
              "_list" : "eligibility_code",
              "_this" : "Adds an eligibility code or codes under the specified voting session ID."
          }
      }
    }
  }
}
