{
  "engine":"transport",
  "name":"Transport engine module",
  "module":"transport",
  "readTimeout":120000,
  "sendTimeout":120000,
  "announceMaxBufferSize":10000,
  "useHttpCalls":true,
  "hashSalt":"Th1s1sS0m3S4lty3ntr0pyf0rTh0s3H4sh1ngFunct10ns!",
  "defaultChannel":"hybrixAnnouncements",
  "defaultIrcHost":"irc.freenode.net",
  "defaultTorrentPasswd":"l3ts_b34t_th3_b4nks!",
  "cron" : 300,
  "quartz" : {
    "open" :["func open"],
    "close" :["func close"],
    "info" :["func info"],
    "stop" :["func stop"],
    "read" :[
      "time $readTimeout",
      "func read",
      "done"
    ],
    "send" :[
      "time $sendTimeout",
      "data $@",
      "join '/'",
      "func $",
      "done"
    ],
    "list" :["func list"],
    "node" : [
      "node",
      "done"
    ],
    "rout" : [
      "# create path out of arguments",
      "data $@",
      "pull",
      "poke routpath",
      "join '/'",
      "poke curlpath",
      "data '$useHttpCalls'",
      "flow 'false' @transportCall",
      "# get endpoint information",
      "curl '$curlpath' GET {}",
      "@transportCall",
      "peek routpath",
      "push '$nodeId' 1",
      "join '/'",
      "time $readTimeout",
      "# get the node's public key/ID",
      "with 'nodeId' node",
      "call 'send/*/$routpath'",
      "call 'read/*/$nodeId/$routpath'",
      "done"
    ]
  },
  "router" : {
    "_help" : "Control the announcement engine.",
    "node" : "The public Node id",
    "open":{
      "_help" : "Connect to a transport network. When initialized the transport returns a handle.",
      "_this" : "When entering no other information, the possible protocols are listed.",
      "_ref" : {
        "_list" : "protocol",
        "_sample":"irc",
        "_this" : "Protocol to use. (irc or bittorrent)",
        "_ref" : {
          "_list" : "target",
          "_this" : "Target group or host to connect to.",
          "_ref" : {
            "_list" : "channel",
            "_this" : "Channel or network name specifier."
          }
        }
      }
    },
    "stop":{
      "_help" : "Close an active transport.",
      "_ref" : {
        "_list" : "handle",
        "_this" : "Specify the handle of the transport to close."
      }
    },
    "info":{
      "_help" : "Get information about an active transport.",
      "_ref" : {
        "_list" : "handle",
        "_this" : "Specify the handle of the transport to query."
      }
    },
    "send":{
      "_help" : "Send a message over an active transport.",
      "_ref" : {
        "_list" : "handle",
        "_ref" : {
          "_list" : "target_node_Id",
          "_ref" : {
            "_ellipsis" : true,
            "_list" : "message",
            "_this" : "Message to send must be a string. A message ID is returned."
          }
        }
      }
    },
    "read":{
      "_help" : "Read a message from an active transport, expecting the data from a certain source.",
      "_ref" : {
        "_list" : "handle",
        "_ref" : {
          "_list" : "source_node_Id",
          "_ref" : {
            "_list" : "message_Id",
            "_this" : "Specify the message ID to which the remote node is responding."
          }
        }
      }
    },
    "rout":{
      "_help" : "Request an API route from a target node over any active transports.",
      "_ref" : {
        "_list" : "target_node_Id",
        "_ref" : {
          "_ellipsis" : true,
          "_list" : "call",
          "_this" : "API call must be a path. The response is returned."
        }
      }
    },
    "list":{
      "_help" : "List active transports, endpoints or peers.",
      "endpoints" : {
        "_this" : "List endpoints belonging to you or other nodeIds.",
        "_ref" : {
          "_list" : "target_node_Id",
          "_this" : "Optionally specify a nodeId target.",
          "_ref" : {
            "_list" : "filter",
            "_this" : "Filter by protocol(s). (For example: 'http,https')"
          }
        }
      },
      "handles" : "Active transport handles are listed.",
      "peers" : "Peers across all networks are listed."
    }
  }
}
