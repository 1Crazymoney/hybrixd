{
  "_help" : "Welcome to the hybrixd REST API. This Application Programming Interface can be used to retrieve information from hybrixd. The requests are formated as / separated commands. (Similar to a website url or file path.)",
  "a":{"_alias":"asset"},
  "asset":{
    "_help":"Assets are cryptocurrencies or tokens.",
    "_this" : "List all available assets.",
    "_ref":{
      "_list":"asset",
      "_sample" : "dummy",
      "balance":{
        "_help":"Get the balance of an asset.",
        "_ref" : {
          "_list" : "address",
          "_sample" : "_dummyaddress_",
          "_this": "Query an address to get its balance.",
          "_response": {"error":0,"info":"Process data.","id":"1519829438958324","progress":1,"started":1519829438958,"stopped":1519829440606,"data":"0.025106200000000000"}
        }
      },
      "contract":{
        "_this" : "Get the contract unique identifier for a token asset.",
        "_response": {"error":0,"info":"Process data.","id":"1519829634775083","progress":1,"started":1519829634775,"stopped":1519829634778,"data":"0xf230b790E05390FC8295F4d3F60332c93BEd42e2"}
      },
      "details":{
        "_this": "Retrieve detailed information of an asset.",
        "_response": {"fee":0.00011149,"factor":"8","contract":"undefined","symbol":"btc","name":"Bitcoin","mode":"bitcoinjslib.bitcoin","unified-symbols":"undefined","fee-symbol":"btc","fee-factor":"8","keygen-base":"btc","generated":"never"}
      },
      "factor":{
        "_this": "Retrieve the factor. The number of decimal digits used for this asset.",
        "_response": {"error":0,"info":"Process data.","id":"1519829794292742","progress":1,"started":1519829794292,"stopped":1519829794316,"data":"18"}
      },
      "fee":{
        "_this": "Retrieve the average transaction fee for sending an asset.",
        "_response": {"error":0,"info":"Process data.","id":"1519830189432904","progress":1,"started":1519830189432,"stopped":1519830189437,"data":"0.000420000000000000"}
      },
      "fee-factor":{
        "_this": "Retrieve the factor belonging to an asset's fee.",
        "_response": "8"
      },
      "fee-symbol":{
        "_this": "Retrieve the symbol in which the transaction fee is calculated.",
        "_response": "btc"
      },
      "keygen-base":{
        "_this": "Retrieve the base symbol used to generated the private and public keys of an asset.",
        "_response": "btc"
      },
      "mode":{
        "_this": "Retrieve the mode for proper initialization of deterministic code blobs on the client-side.",
        "_response": "bitcoinjslib.bitcoin"
      },
      "history": {
        "_help": "Retrieve the transaction history for an asset.",
        "_ref": {
          "_list": "address",
          "_sample" : "_dummyaddress_",
          "_this": "Get the history belonging to an address on the ledger.",
          "_ref": {
            "_list": "count",
            "_sample" : "10",
            "_this": "Specify the amount of entries to return.",
            "_ref": {
              "_list": "offset",
              "_sample" : "0",
              "_this": "Specify the offset starting from the latest transaction."
            }
          }
        }
      },
      "sample" : {
        "_this": "Retrieve a sample address and transaction id for test purposes.",
        "_response": {"address":"1J3St3rp3hVsuLGhegbLWicyPL3NRD3YJ7","transaction":"2c0832c153cf33327dae0e95a3bc39f4b02ae887725a32c07b1be47a2faffc55"}
      },
      "transaction":{
        "_help" : "Get transaction information.",
        "_ref" : {
          "_list" : "transaction_id",
          "_sample" : "$TRANSACTION_ID",
          "_this": "Retrieve the details belonging to a transaction ID."
        }
      },
      "peers":{
        "_this": "Get a list of asset protocol connectivity peers",
        "_response": {"error":0,"info":"Process data.","id":"1519830189432904","progress":1,"started":1519830189432,"stopped":1519830189437,"data":["001.peer","002.peer","003.peer"]}
      },
      "push":{
        "_help":"Push a signed transaction to a blockchain, DAG or other ledger system.",
        "_ref" : {
          "_list" : "transaction",
          "_this":"Signed transaction data pushed into the network will return a transaction ID.",
          "_sample" : "$HEXADECIMAL_TRANSACTION_DATA",
          "_response" : "$TRANSACTION_ID"
        }
      },
      "keygen-base":{
        "_this": "Retrieve the keygen-base. This is the asset that is used to generate keys."
      },
      "unified-symbols":{
        "_this": "Retrieve the unified symbols that form a hybrid asset.",
        "_response": ["eth","nxt","omni","waves","xcp","xem"]
      },
      "unspent": {
        "_help" : "Retrieve the unspents for an asset. Unspent is a bitcoin related term that in hybrixd is used for pre-transactional data. Bitcoin: 'unspent' means available inputs for creating a transaction. Ethereum: 'unspent' means the most recent nonce of the cryptocurrency account needed for constructing a transaction.  NXT: 'unspent' means the server reply information needed to construct a deterministic transaction.",
        "_ref" : {
          "_this": "Specify the source address from which you wish to calculate unspents.",
          "_list" : "source_address",
          "_sample" : "_dummyaddress_",
          "_ref" : {
            "_list" : "amount",
            "_sample" : "100",
            "_this" : "Specify the amount to calculate unspents for.",
            "_ref" : {
              "_list" : "target_address",
              "_sample" : "_dummyaddress_",
              "_this" : "Specify the target address to calculate unspents for.",
              "_ref" : {
                "_list" : "public_key",
                "_sample" : "_dummypublickey_",
                "_this" : "Optional: specify the public key (needed for certain cryptocurrencies, like NXT for example).",
                "_response" : {"error":0,"info":"Process data.","id":"1519830913478733","progress":1,"started":1519830913478,"stopped":1519830914923,"data":{"nonce":"1"}}
              }
            }
          }
        }
      }
    }
  },
  "c":{"_alias":"command"},
  "command":{
    "_help":"Execute a direct command to hybrixd.",
    "_access":"root",
    "apiqueue" :{
      "_help" : "Commands to control and check the API Queue.",
      "pause":"Pause the API Queue",
      "resume":"Resume the API Queue when it is paused.",
      "status":"Check the status of the API Queue."
    },
    "cache" :{
      "_help" : "Commands to control and check the cache.",
      "clear" : "Clear the cache."
    },
    "exec" :{
      "_help" : "Execute a Qrtz script.",
      "_ref" : {
        "_ellipsis" : true,
        "_list" : "file",
        "_this" : "Specify the file containing the code to execute."
      }
    },
    "reload" : {
      "_help":"Commands to reload hybrixd or specific components",
      "_this":"Reload hybrixd.",
      "conf":"Reload hybrixd configuration files.",
      "modules":"Reload hybrixd modules.",
      "recipes":"Reload hybrixd recipes."
    },
    "scheduler" :{
      "_help" : "Commands to control and check the Scheduler.",
      "pause":"Pause the Scheduler.",
      "resume":"Resume the Scheduler when it is paused.",
      "status":"Check the status of the Scheduler."
    },
    "userinterface" :{
      "_help" : "Commands to control and check the User Interface.",
      "close":"Close the User Interface.",
      "listen":"Resume the listening on the User Interface when it is closed.",
      "status":"Check the status of the User Interface."
    },
    "restinterface" :{
      "_help" : "Commands to control and check the Rest Interface.",
      "close":"Close the Rest Interface.",
      "listen":"Resume the listening on the Rest Interface when it is closed.",
      "status":"Check the status of the Rest Interface."
    },
    "stop" : "Stop hybrixd."
  },
  "e":{"_alias":"engine"},
  "engine":{
    "_help":"Engines are scriptable modules that can be built to do a variety of tasks.",
    "_this":"List available engines."
  },
  "h":{"_alias":"help"},
  "help":{
    "_this":"Display help as html.",
    "_ellipsis":true
  },
  "l":{"_alias":"list"},
  "list":{
    "_help" : "Produce standard property lists of assets, sources or engines.",
    "asset" : {
      "names":"Retrieve a list of all basic asset names.",
      "modes":"Retrieve a list of all basic asset modes.",
      "details":"Retrieve a list of all basic asset details [{symbol,name,mode}]."
    }
  },
  "p":{"_alias":"proc"},
  "proc":{
    "_this" : "List all processes.",
    "_ref" : {
      "_list" : "proc",
      "_this" : "Specify a process ID to see its details."
    },
    "kill":{
      "_access":"root",
      "_help" : "Kill a process and all child processes.",
      "_ref" : {
        "_list" : "proc",
        "_this" : "Specify the process ID to kill."
      }
    },
    "pause":{
      "_this" : "List all paused processes.",
      "_ref" : {
        "_access":"root",
        "_list" : "proc",
        "_this" : "Specify the process ID to pause. All its child processes are also paused."
      }
    },
    "resume":{
      "_help" : "Resume a paused process and all child processes.",
      "_ref" : {
        "_access":"root",
        "_list" : "proc",
        "_this" : "Specify the process ID to resume."
      }
    },
    "peek":{
      "_access" : "root",
      "_help" : "Display the internal data of a process.",
      "_ref" : {
        "_list" : "proc",
        "_this" : "Specify the process ID to get its internal data."
      }
    },
    "queue":{
      "_access":"owner",
      "_this" : "Display queued processes.",
      "_ref" : {
        "_list" : "proc",
        "_this" : "Specify the process ID to get its queue status."
      }
    }
  },
  "s":{"_alias":"source"},
  "source":{
    "_help":"Sources are read-only information providers.",
    "_this":"List available sources."
  },
  "v":{"_alias":"version"},
  "version":{
    "_help" : "Display version information.",
    "details" : "Get version details."
  },
  "w":{"_alias":"wchan"},
  "wchan":{
    "hash" : {
      "_this" : "Retrieve the hash for a flat file result.",
      "_ellipsis": true
    },
    "_help" : "Wchan can be used to retrieve parts of a file result.",
    "_ref":{
      "_this" : "Retrieve file from given offset.",
      "_ellipsis": true,
      "_list":"offset",
      "_ref":{
        "_this" : "Retrieve file from given offset with given length.",
        "_ellipsis": true,
        "_list":"length",
        "_ref":{
          "_this" : "",
          "_list":"path",
          "_ellipsis": true
        }
      }
    }
  },
  "x":{"_alias":"xauth"},
  "xauth":{
    "_help" : "Create an authenticated session channel for a encrypted communications.",
    "_ref":{
      "_help" : "The 64 char session hex key is given as as a public key.",
      "_list":"session_hexkey",
      "0" : {
        "_this":"Step 0 consists of requesting `$NONCE1` . Note that resending the request will erase the session.",
        "_response" : "{error:0, nonce1:$NONCE1}"
      },
      "1" : {
        "_help": "Step 1 consists of sending the signed `$NONCE1` , if this is verified the session public key is given.",
        "_ref" : {
          "_list": "crypt_hex",
          "_this": "Make sure to include the hexadecimal signature.",
          "_response" : "{error:0,server_sign_pubkey:$SERVER_SIGN_PUBKEY,server_session_pubkey:$SERVER_SESSION_PUBKEY,current_nonce:$NONCE_CONHEX,crhex:$CRYPT_HEX}"
        }
      }
    }
  },
  "y":{"_alias":"ychan"},
  "ychan":{
    "_help" : "Send an encrypted request through the session channel and recieve an encrypted response.",
    "_ref":{
      "_help" : "The 64 char session hex key is given as a public key.",
      "_list":"session_hexkey",
      "_ref" : {
        "_list":"nonce",
        "_ref" : {
          "_list":"encrypted_path",
          "_this" : " `$ENCRYPTED_PATH` , for example: `/asset/btc/details` encrypted using the `$SESSION_PUBLIC_KEY` is executed as an API command and the result is encrypted and returned."
        }
      }
    }
  },
  "z":{"_alias":"zchan"},
  "zchan":{
    "_help" : "Send an encrypted request through the session channel and recieve an encrypted and compressed response.",
    "_ref":{
      "_list":"session_hexkey",
      "_help" : "The 64 char session hex key is given as a public key.",
      "_ref" : {
        "_list":"nonce",
        "_ref" : {
          "_list":"encrypted_path",
          "_this" : " `$ENCRYPTED_PATH` , for example: `/asset/btc/details` encrypted using the `$SESSION_PUBLIC_KEY` is executed as an API command and the result is encrypted and compressed using lmza and returned."
        }
      }
    }
  }
}
